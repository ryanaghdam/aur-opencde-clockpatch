diff -N -u -r ./etc/opencde/dtpanel/menus.ini ../opencde_timers/etc/opencde/dtpanel/menus.ini
--- ./etc/opencde/dtpanel/menus.ini	2011-02-19 09:44:01.000000000 -0500
+++ ../opencde_timers/etc/opencde/dtpanel/menus.ini	2011-02-21 21:20:28.136304769 -0500
@@ -11,37 +11,37 @@
 ; [section]
 ; variable=value
 
-<Utilities>
-  pixmap=Fpapps.l.pm
-  command=xcalc
-  [Calculator]
-    command=xcalc
-    pixmap=Dtcalc.m.pm
-  [Terminal]
-    command=xterm
-    pixmap=Fpterm.m.pm
+<Clock>
+  pixmap=Fpclock.l.pm
+  command=xclock
+
+<Calendar>
+  pixmap=FpCM.l.pm
 
-<Documents>
+<Applications>
   pixmap=Fphome.l.pm
-<Multimedia>
-  pixmap=DtBeep.pm
   [VLC Media Player]
-  command=vlc
-  pixmap=DtScrn.m.pm
-<Applications>
-  pixmap=DtABbil.l.pm
+    command=vlc
+    pixmap=DtScrn.m.pm
   [NetBeans]
-  command=/usr/local/netbeans/bin/netbeans
-  pixmap=DtABbip.m.pm
+    command=/usr/local/netbeans/bin/netbeans
+    pixmap=DtABbip.m.pm
   [Gimp]
-  command=gimp
-  pixmap=DtColor.m.pm
+    command=gimp
+    pixmap=DtColor.m.pm
   [Blender]
-  command=blender
-  pixmap=Dtactn.m.pm
+    command=blender
+    pixmap=Dtactn.m.pm
   [OpenOffice.org]
-  command=openoffice.org-3.2.1
-  pixmap=DtPrtjb.m.pm
+    command=openoffice.org-3.2.1
+    pixmap=DtPrtjb.m.pm
+  [Calculator]
+    command=xcalc
+    pixmap=Dtcalc.m.pm
+  [Terminal]
+    command=xterm
+    pixmap=Fpterm.m.pm
+
 <Network>
   pixmap=DtBento.l.pm
 
@@ -67,11 +67,11 @@
   command=xterm
   pixmap=Dtterm.l.pm
   [Task Manager]
-  command=${OPENCDEPREFIX}/bin/dttask
-  pixmap=Dtexec.m.pm
+    command=${OPENCDEPREFIX}/bin/dttask
+    pixmap=Dtexec.m.pm
   [Terminal]
-  command=xterm
-  pixmap=Fpterm.m.pm
+    command=xterm
+    pixmap=Fpterm.m.pm
 
 <Preferences>
   pixmap=SDtactrls.l.pm
diff -N -u -r ./src/common/Environment.cpp ../opencde_timers/src/common/Environment.cpp
--- ./src/common/Environment.cpp	2011-02-19 09:44:03.000000000 -0500
+++ ../opencde_timers/src/common/Environment.cpp	2011-02-19 20:45:59.436061732 -0500
@@ -3,6 +3,7 @@
 string Environment::name = "";
 string Environment::prefix = "";
 string Environment::home = "";
+string Environment::mail = "";
 int Environment::uid = 0;
 
 void Environment::initialize(int argc, char* argv[])
@@ -23,7 +24,16 @@
   }
 
   home = temp;
-
+  
+  temp = NULL;
+  temp = getenv("MAIL");
+  if(temp == NULL)
+  {
+    throw Exception("Failed to fetch the 'MAIL' environmental variable");
+  }
+  
+  mail = temp;
+  
   if(Filesystem::folderExists(home + "/.opencde") == false)
   {
     Filesystem::createFolder(home + "/.opencde");
@@ -61,3 +71,7 @@
   return home;
 }
 
+string Environment::getMail()
+{
+  return mail;
+}
diff -N -u -r ./src/common/Filesystem.cpp ../opencde_timers/src/common/Filesystem.cpp
--- ./src/common/Filesystem.cpp	2011-02-19 09:44:03.000000000 -0500
+++ ../opencde_timers/src/common/Filesystem.cpp	2011-02-19 15:46:01.773697343 -0500
@@ -33,3 +33,59 @@
   }
 }
 
+int Filesystem::countFiles(string path)
+{
+  DIR* dir = NULL;
+
+  dir = opendir(path.c_str());
+  if (dir == NULL)
+  {
+          return -1;
+  }
+  else
+  {
+        struct dirent *dp;
+
+        int numfiles = 0;
+        while ((dp = readdir(dir)) != NULL)
+        {
+          numfiles++;
+        }
+        (void)closedir(dir);
+        
+        return numfiles;        
+  }
+}
+
+bool Filesystem::fileModified(string path)
+{
+  struct stat statbuffer;
+ 
+  if(stat(path.c_str(),&statbuffer) < 0)
+  {
+    // throw Exception("Failed to stat '" + path + "'.");
+  }
+  else
+  {
+    if(statbuffer.st_mtime > statbuffer.st_atime)
+    {
+      return true;
+    }
+  }
+  return false;
+}
+
+unsigned long Filesystem::fileSize(string path)
+{
+  struct stat statbuffer;
+  
+  if(stat(path.c_str(),&statbuffer) < 0)
+  {
+    // throw Exception("Failed to stat '" + path + "'.");
+  }
+  else
+  {
+    return statbuffer.st_size;
+  }
+}
+
diff -N -u -r ./src/common/include/Environment.h ../opencde_timers/src/common/include/Environment.h
--- ./src/common/include/Environment.h	2011-02-19 09:44:03.000000000 -0500
+++ ../opencde_timers/src/common/include/Environment.h	2011-02-19 11:51:52.000000000 -0500
@@ -16,6 +16,7 @@
   static string name;
   static string prefix;
   static string home;
+  static string mail;
   static int uid;
 
 public:
@@ -23,6 +24,7 @@
   static string getName();
   static string getPrefix();
   static string getHome();
+  static string getMail();
   static int getUid();
 
 };
diff -N -u -r ./src/common/include/Filesystem.h ../opencde_timers/src/common/include/Filesystem.h
--- ./src/common/include/Filesystem.h	2011-02-19 09:44:03.000000000 -0500
+++ ../opencde_timers/src/common/include/Filesystem.h	2011-02-19 12:52:55.000000000 -0500
@@ -7,6 +7,8 @@
 
 #include <dirent.h>
 #include <stdlib.h>
+#include <sys/types.h>
+#include <sys/stat.h>
 
 #include <Exception.h>
 
@@ -20,7 +22,9 @@
   static void createFolder(string path);
   static bool folderExists(string path);
   static void copyFolder(string source, string destination);
-
+  static int countFiles(string path);
+  static bool fileModified(string path);
+  static unsigned long fileSize(string path);
 };
 
 #endif
diff -N -u -r ./src/dtpanel/MenuWindow.cpp ../opencde_timers/src/dtpanel/MenuWindow.cpp
--- ./src/dtpanel/MenuWindow.cpp	2011-02-19 09:44:03.000000000 -0500
+++ ../opencde_timers/src/dtpanel/MenuWindow.cpp	2011-02-19 12:26:39.000000000 -0500
@@ -73,6 +73,7 @@
 
   cout << section << endl;
   system(string(menuIni.getValue(menu, section, "command", "echo 'Command is unspecified'") + " >/dev/null 2>&1 &").c_str());
+  panelWindow->activityBlink(NULL);
   delete this;
 }
 
diff -N -u -r ./src/dtpanel/PanelWindow.cpp ../opencde_timers/src/dtpanel/PanelWindow.cpp
--- ./src/dtpanel/PanelWindow.cpp	2011-02-19 09:44:03.000000000 -0500
+++ ../opencde_timers/src/dtpanel/PanelWindow.cpp	2011-02-21 22:01:35.500693773 -0500
@@ -17,6 +17,18 @@
   int totalWidth = 0;
   XIni menusIni(Environment::getHome() + "/.opencde/dtpanel/menus.ini");
   vector<string> groups;
+ 
+  fp_icon_size = 64;
+
+  // Initialize state
+  blink_state = 0;
+  blink_count = 3;
+  mail_size   = 0;
+  
+  trash_button_loc = NULL;
+  mail_button_loc  = NULL;
+  cm_button_loc    = NULL;
+  clock_button_loc = NULL;
 
   menusIni.getGroups(&groups);
 
@@ -28,7 +40,7 @@
       {
         throw Exception("Multiple desktop selection panels can not be specified");
       }
-      desktopsPanelX = (index * 64) + handleWidth;
+      desktopsPanelX = (index * fp_icon_size) + handleWidth;
       desktopsPanelFound = true;
     }
     else
@@ -47,7 +59,7 @@
   setBackgroundPixmap(Environment::getPrefix() + "/share/opencde/backdrops/" + menusIni.getValue("Desktops", desktops.at(0), "background", "SmoothCurves.pm"));
   desktopsPanelWidth = -4 + desktopsPanelMargin + desktopsPanelMargin + (((desktops.size() + 1) / 2) * (115 + desktopsPanelSpacing));
 
-  totalWidth = 21 + 21 + desktopsPanelWidth + (64 * menus.size());
+  totalWidth = 21 + 21 + desktopsPanelWidth + (fp_icon_size * menus.size());
 
   minimizeImageButton.reset(new ImageButton(this, "minimizeImageButton", Environment::getPrefix() + "/share/opencde/dtpanel/minimize.xpm"));
   minimizeImageButton->setHighlightThickness(0);
@@ -82,6 +94,16 @@
   lockImageButton->setPosition(1, 8);
   lockImageButton->setClickFunction(new ParameterFunction<PanelWindow>(this, &PanelWindow::onLockImageButtonClicked));
 
+  activityImageButton.reset(new ImageButton(desktopsPanel.get(), "activityImageButton", Environment::getPrefix() + "/share/opencde/icons/Fplite.s.pm"));
+  activityImageButton->setBorderThickness(0);
+  activityImageButton->setHighlightThickness(1);
+  activityImageButton->setSize(30, 30);
+  activityImageButton->setPosition(desktopsPanelWidth - 31, 5);
+
+  activityTimer.reset(new Timer(this));
+  activityTimer->setDuration(500L);
+  activityTimer->setTimerCallback(new ParameterFunction<PanelWindow>(this,&PanelWindow::activityBlink));
+  
   exitImageButton.reset(new ImageButton(desktopsPanel.get(), "exitImageButton", Environment::getPrefix() + "/share/opencde/icons/Fpexit.s.pm"));
   exitImageButton->setBorderThickness(0);
   exitImageButton->setHighlightThickness(1);
@@ -106,7 +128,7 @@
     {
       spacerPanels.push_back(new Panel(this, "openMenuImageButton"));
       spacerPanels.at(spacerPanels.size() - 1)->setBorderThickness(1);
-      spacerPanels.at(spacerPanels.size() - 1)->setSize(64, 16);
+      spacerPanels.at(spacerPanels.size() - 1)->setSize(fp_icon_size, 16);
       spacerPanels.at(spacerPanels.size() - 1)->setPosition(currentWidth, 0);
 
       openMenuImageButtons.push_back(new ImageButton(spacerPanels.at(spacerPanels.size() - 1), "openMenuImageButton", Environment::getPrefix() + "/share/opencde/dtpanel/open_menu_up.xpm"));
@@ -124,7 +146,7 @@
       }
 
       openMenuImageButtons.at(openMenuImageButtons.size() - 1)->setClickFunction(new ParameterFunction<PanelWindow>(this, &PanelWindow::onOpenMenuImageButtonClicked));
-      currentWidth+=64;
+      currentWidth+=fp_icon_size;
     }
   }
 
@@ -140,16 +162,55 @@
     }
     else
     {
-      iconImageButtons.push_back(new ImageButton(iconsPanel.get(), "iconImageButton", Environment::getPrefix() + "/share/opencde/icons/" + menusIni.getValue(groups.at(index), "", "pixmap", "someicon.xpm")));
-      iconImageButtons.at(iconImageButtons.size() - 1)->setHighlightThickness(1);
-      iconImageButtons.at(iconImageButtons.size() - 1)->setBorderThickness(0);
-      iconImageButtons.at(iconImageButtons.size() - 1)->setSize(64, 64);
-      iconImageButtons.at(iconImageButtons.size() - 1)->setPosition(currentWidth, 1);
-      iconImageButtons.at(iconImageButtons.size() - 1)->setClickFunction(new ParameterFunction<PanelWindow>(this, &PanelWindow::onIconImageButtonClicked));
-      currentWidth+=64;
+	  iconImageButtons.push_back(new ImageButton(iconsPanel.get(), "iconImageButton", Environment::getPrefix() + "/share/opencde/icons/" + menusIni.getValue(groups.at(index), "", "pixmap", "someicon.xpm")));
+	  iconImageButtons.at(iconImageButtons.size() - 1)->setHighlightThickness(1);
+	  iconImageButtons.at(iconImageButtons.size() - 1)->setBorderThickness(0);
+	  iconImageButtons.at(iconImageButtons.size() - 1)->setSize(fp_icon_size, fp_icon_size);
+	  iconImageButtons.at(iconImageButtons.size() - 1)->setPosition(currentWidth, 1);
+	  iconImageButtons.at(iconImageButtons.size() - 1)->setClickFunction(new ParameterFunction<PanelWindow>(this, &PanelWindow::onIconImageButtonClicked));
+
+      if(groups.at(index) == "Trash")
+      {
+		trash_state = 0;
+		trash_button_loc = iconImageButtons.size() - 1;
+		trashTimer.reset(new Timer(this));
+		trashTimer->setDuration(2000L);
+		trashTimer->setTimerCallback(new ParameterFunction<PanelWindow>(this,&PanelWindow::trashCheck));
+		trashCheck(NULL);
+      }
+      
+      if(groups.at(index) == "Network") // assumes this is for mail
+      {
+		mail_state = 0;
+		mail_button_loc = iconImageButtons.size() - 1;
+		mailTimer.reset(new Timer(this));
+		mailTimer->setDuration(3000L);
+		mailTimer->setTimerCallback(new ParameterFunction<PanelWindow>(this,&PanelWindow::mailCheck));
+		mailCheck(NULL);
+      }
+
+	  if(groups.at(index) == "Clock") // new definition in default menu.
+	  {
+		clock_button_loc = iconImageButtons.size() - 1;
+		clockTimer.reset(new Timer(this));
+		clockTimer->setDuration(30000L);
+		clockTimer->setTimerCallback(new ParameterFunction<PanelWindow>(this,&PanelWindow::updateClock));
+		updateClock(NULL);
+	  }
+
+	  if(groups.at(index) == "Calendar") // new definition in default menu.
+	  {
+		cm_button_loc = iconImageButtons.size() - 1;
+		cmTimer.reset(new Timer(this));
+		cmTimer->setDuration(30000L); // 30 Second intervals to update calendar.
+		cmTimer->setTimerCallback(new ParameterFunction<PanelWindow>(this, &PanelWindow::cmCheck));
+		cmCheck(NULL);
+	  }
+
+      currentWidth+=fp_icon_size;
     }
   }
-
+  
 // ##### Add all the desktop buttons to the desktops panel
 
   int desktopTop = 8;
@@ -168,9 +229,9 @@
     spacerPanels.at(spacerPanels.size() - 1)->setShadowType(ShadowType::IN);
     spacerPanels.at(spacerPanels.size() - 1)->setBorderThickness(1);
     spacerPanels.at(spacerPanels.size() - 1)->setSize(115, 30);
-
+	
     spacerPanels.at(spacerPanels.size() - 1)->setPosition(desktopLeft + desktopsPanelMargin + desktopIndex * (115 + desktopsPanelSpacing) , desktopTop);
-
+	
     ss.str("");
     ss << "desktopToggleButton" << desktopIndex + 1;
     desktopToggleButtons.push_back(new ToggleButton(spacerPanels.at(spacerPanels.size() - 1), ss.str()));
@@ -213,11 +274,9 @@
     }
   }
 
-  //std::cout << selectedIndex << std::endl;
-  //std::cout << menus.at(selectedIndex) << std::endl;
 
   system(string(menusIni.getValue(menus.at(selectedIndex), "", "command", "echo 'No application assigned to this button'") + " >/dev/null 2>&1 &").c_str());
-  //system(string(menusIni.getValue(menus.at(selectedIndex), "", "command", "xcalc") + " >/dev/null 2>&1 &").c_str());
+  activityBlink(NULL);
 }
 
 void PanelWindow::onDesktopToggleButtonClicked(void* caller)
@@ -237,12 +296,12 @@
       desktopToggleButtons.at(index)->setToggled(false);
     }
   }
-
+  
   if(desktopToggleButtons.at(desktop - 1)->getToggled() == false)
   {
     desktopToggleButtons.at(desktop - 1)->setToggled(true);
   }
-
+  
   setBackgroundPixmap(Environment::getPrefix() + "/share/opencde/backdrops/" + menusIni.getValue("Desktops", desktops.at(desktop-1), "background", "SmoothCurves.pm"));
   system(string(Environment::getPrefix() + "/bin/mwmext 0 " + getWindow()).c_str());
   ss << desktop;
@@ -286,10 +345,6 @@
     }
   }
 
-  //cout << menu << endl;
-  //cout << getX() << endl;
-  //cout << getY() << endl;
-
   for(int index = 0; index < menuWindows.size(); index++)
   {
     if(menuWindows.at(index)->getMenu() == menu)
@@ -323,9 +378,8 @@
   }
 
   screen = DefaultScreen(display);
-
-  XpmReadFileToPixmap(display, RootWindow(display, screen), (char*)path.c_str(), &pixmap, NULL, NULL)
-;
+  
+  XpmReadFileToPixmap(display, RootWindow(display, screen), (char*)path.c_str(), &pixmap, NULL, NULL);
   XSetWindowBackgroundPixmap(display, DefaultRootWindow(display), pixmap);
   XClearWindow(display, RootWindow(display, screen));
   XCloseDisplay(display);
@@ -341,3 +395,235 @@
   exit(0);
 }
 
+void PanelWindow::activityBlink(void* data)
+{
+  if(blink_state == 0)
+  {
+	activityImageButton->setPixmap(Environment::getPrefix() + "/share/opencde/icons/FpliteY.s.pm");
+	blink_state = 1;
+  }
+  else
+  {
+	activityImageButton->setPixmap(Environment::getPrefix() + "/share/opencde/icons/Fplite.s.pm");
+	blink_state = 0;
+  }
+  if(blink_count > 0 )
+  {
+	blink_count--;
+	activityTimer->runTimer(); 
+  }
+  else
+  {
+	blink_count = 3;
+  }
+}
+
+void PanelWindow::trashCheck(void *data)
+{
+  int oldtrash_state = trash_state;
+  if(Filesystem::countFiles(Environment::getHome() + "/.local/share/Trash/files") > 2)
+  {
+	trash_state = 1;
+  }
+  else
+  {
+	trash_state = 0;
+  }
+
+  if (oldtrash_state != trash_state)
+  {
+	switch(trash_state)
+	{
+	case 0:
+	  iconImageButtons.at(trash_button_loc)->setPixmap(Environment::getPrefix() + "/share/opencde/icons/Fptrsh.l.pm");
+	  break;
+	  
+	case 1:
+	  iconImageButtons.at(trash_button_loc)->setPixmap(Environment::getPrefix() + "/share/opencde/icons/Fptrsh7.l.pm");
+	  break;
+	}
+	iconImageButtons.at(trash_button_loc)->setSize(fp_icon_size, fp_icon_size);
+  }
+  trashTimer->runTimer();
+}
+
+void PanelWindow::mailCheck(void *data)
+{
+  int oldmail_state = mail_state;
+  
+  if((Filesystem::fileModified(Environment::getMail()) == true) &&
+     (Filesystem::fileSize(Environment::getMail()) > 0) &&
+     (Filesystem::fileSize(Environment::getMail()) > mail_size))
+  { 
+	mail_state = 0;
+  }
+  
+  else if((Filesystem::fileModified(Environment::getMail()) == false) && 
+          (Filesystem::fileSize(Environment::getMail()) > 0))
+  {
+	mail_size  = Filesystem::fileSize(Environment::getMail());
+	mail_state = 1;
+  }
+  else if((Filesystem::fileModified(Environment::getMail()) == true) && 
+          (Filesystem::fileSize(Environment::getMail()) > 0))
+  {
+	mail_size  = Filesystem::fileSize(Environment::getMail());
+	mail_state = 1;
+  }
+  else if (Filesystem::fileSize(Environment::getMail()) == 0)
+  {
+	mail_size  = Filesystem::fileSize(Environment::getMail());
+	mail_state = 2;
+  }
+  
+  if (oldmail_state != mail_state)
+  {
+    switch(mail_state)
+    {
+	case 0:
+	  iconImageButtons.at(mail_button_loc)->setPixmap(Environment::getPrefix() + "/share/opencde/icons/DtMnew.l.pm");
+	  break;
+	  
+	case 1:
+	  iconImageButtons.at(mail_button_loc)->setPixmap(Environment::getPrefix() + "/share/opencde/icons/DtMail.l.pm");
+	  break;
+	  
+	case 2:
+	  iconImageButtons.at(mail_button_loc)->setPixmap(Environment::getPrefix() + "/share/opencde/icons/DtMnone.l.pm");
+	  break;      
+	}
+	iconImageButtons.at(mail_button_loc)->setSize(fp_icon_size, fp_icon_size);
+  }
+  mailTimer->runTimer();
+}
+
+void PanelWindow::cmCheck(void *data)
+{
+  std::string month;
+  int month_x = 16;
+  int month_y = 20;
+
+  std::string day;
+  int day_x = 19;
+  int day_y = 35;
+
+  int bufsize = 5;
+
+  // Get the month and day from time.h
+  time_t rawtime;
+  struct tm* timeinfo;
+  char buffer[bufsize];
+
+  time(&rawtime);
+  timeinfo = localtime(&rawtime);
+
+  strftime(buffer,bufsize,"%b",timeinfo);
+  month = buffer;
+
+  strftime(buffer,bufsize,"%d",timeinfo);  
+  day = buffer;
+
+  // Center single digit days
+  if(atoi(day.c_str()) < 10) {
+	day_x += 3;
+  }
+  
+  iconImageButtons.at(cm_button_loc)->setPixmap(Environment::getPrefix() + "/share/opencde/icons/FpCM.l.pm");
+  iconImageButtons.at(cm_button_loc)->setSize(fp_icon_size, fp_icon_size);
+  iconImageButtons.at(cm_button_loc)->setText(month_x, month_y, month.c_str());
+  iconImageButtons.at(cm_button_loc)->setText(day_x, day_y, day.c_str());
+  cmTimer->runTimer();
+}
+
+void PanelWindow::updateClock(void *data)
+{
+  int bufsize = 5;
+  int minute;
+  int hour;
+
+  int origin_x = 24;
+  int origin_y = 24;
+
+  // Angles
+  double minute_a, minute_left_a, minute_right_a;
+  double hour_a, hour_left_a, hour_right_a;
+
+  // Maximum radius of arms, width is the distance from origin to the base
+  // point (left or right) of the triangle.
+  int minute_r = 14;
+  int hour_r   = 10;
+  int width_r  = 2;
+
+  int numPoints = 4;
+
+  XPoint leftPoint_hour,   rightPoint_hour,   apexPoint_hour;
+  XPoint leftPoint_minute, rightPoint_minute, apexPoint_minute;
+
+  XPoint hourHand[numPoints];
+  XPoint minuteHand[numPoints];
+  
+  // Get the hour and minute  
+  time_t rawtime;
+  struct tm* timeinfo;
+  char buffer[bufsize];
+
+  time(&rawtime);
+  timeinfo = localtime(&rawtime);
+
+  strftime(buffer,bufsize,"%l",timeinfo);
+  hour = atoi(buffer);
+
+  strftime(buffer,bufsize,"%M",timeinfo);  
+  minute = atoi(buffer);
+
+  // Compute the angles of all three points of the triangle in radians
+  // after finding the hour and minute angles
+  minute_a = 6 * minute * M_PI / 180;
+  hour_a   = 0.5 * (60 * hour + minute) * M_PI / 180;
+
+  minute_left_a  = minute_a - 90; // origin to left vertex
+  hour_left_a    = hour_a   - 90; // origin to left vertex
+  minute_right_a = minute_a + 90; // origin to right vertex
+  hour_right_a   = hour_a   + 90; // origin to right vertex
+  
+  // Find the offsets of the points in the triangle
+
+  // Minute hand triangle
+  apexPoint_minute.x  = origin_x + (minute_r * sin(minute_a));
+  apexPoint_minute.y  = origin_y - (minute_r * cos(minute_a));
+
+  leftPoint_minute.x  = origin_x + (width_r * sin(minute_left_a));
+  leftPoint_minute.y  = origin_y - (width_r * cos(minute_left_a));
+
+  rightPoint_minute.x = origin_x + (width_r * sin(minute_right_a));
+  rightPoint_minute.y = origin_y - (width_r * cos(minute_right_a));
+
+  minuteHand[0] = leftPoint_minute;
+  minuteHand[1] = rightPoint_minute;
+  minuteHand[2] = apexPoint_minute;
+  minuteHand[3] = leftPoint_minute;
+  
+  // Hour hand triangle
+  apexPoint_hour.x  = origin_x + (hour_r   * sin(hour_a));
+  apexPoint_hour.y  = origin_y - (hour_r   * cos(hour_a));
+
+  leftPoint_hour.x  = origin_x + (width_r * sin(hour_left_a));
+  leftPoint_hour.y  = origin_y - (width_r * cos(hour_left_a));
+
+  rightPoint_hour.x = origin_x + (width_r * sin(hour_right_a));
+  rightPoint_hour.y = origin_y - (width_r * cos(hour_right_a));
+
+  // Place the points in order of drawing them, return to first point.
+  hourHand[0] = leftPoint_hour;
+  hourHand[1] = rightPoint_hour;
+  hourHand[2] = apexPoint_hour;
+  hourHand[3] = leftPoint_hour;
+
+  // Blank the pixmap with the clock face and resize.
+  iconImageButtons.at(clock_button_loc)->setPixmap(Environment::getPrefix() + "/share/opencde/icons/Fpclock.l.pm");
+  iconImageButtons.at(clock_button_loc)->setSize(fp_icon_size, fp_icon_size);
+
+  // Draw the clock hands
+  iconImageButtons.at(clock_button_loc)->drawClockHands(hourHand,minuteHand,numPoints);
+  clockTimer->runTimer();
+}
diff -N -u -r ./src/dtpanel/PanelWindow.h ../opencde_timers/src/dtpanel/PanelWindow.h
--- ./src/dtpanel/PanelWindow.h	2011-02-19 09:44:03.000000000 -0500
+++ ../opencde_timers/src/dtpanel/PanelWindow.h	2011-02-21 21:24:09.630417956 -0500
@@ -6,6 +6,8 @@
 #include <memory>
 #include <vector>
 #include <sstream>
+#include <time.h>
+#include <math.h>
 
 #include <X11/Xlib.h>
 #include <X11/xpm.h>
@@ -34,12 +36,44 @@
   auto_ptr<ImageButton> handle2ImageButton;
   auto_ptr<ImageButton> exitImageButton;
   auto_ptr<ImageButton> lockImageButton;
+  auto_ptr<ImageButton> activityImageButton;
+
+  auto_ptr<Timer>       activityTimer;
+  auto_ptr<Timer>       trashTimer;
+  auto_ptr<Timer>       mailTimer;
+  auto_ptr<Timer>       cmTimer;
+  auto_ptr<Timer>       clockTimer;
 
   vector<string> desktops;
   auto_ptr<Panel> desktopsPanel;
   vector<ToggleButton*> desktopToggleButtons;
 
   void setBackgroundPixmap(string path);
+  
+  // Panel icon size
+  int fp_icon_size;
+  
+  // State tracking
+  int blink_state;
+  int blink_count;
+ 
+  int trash_state;
+  int trash_button_loc;
+  
+  int mail_state;
+  unsigned long mail_size;
+  int mail_button_loc;
+
+  // Calendar (CM) location
+  int cm_button_loc;
+
+  // Clock location
+  int clock_button_loc;
+  
+  void trashCheck(void* data);
+  void mailCheck(void* data);
+  void cmCheck(void* data);
+  void updateClock(void* data);
 
 public:
   PanelWindow(Main* main);
@@ -55,6 +89,8 @@
   void menuClosed(string menu);
 
   vector<MenuWindow*>* getMenuWindows();
+  
+  void activityBlink(void* data);
 
 };
 
diff -N -u -r ./src/motifmm/ImageButton.cpp ../opencde_timers/src/motifmm/ImageButton.cpp
--- ./src/motifmm/ImageButton.cpp	2011-02-19 09:44:03.000000000 -0500
+++ ../opencde_timers/src/motifmm/ImageButton.cpp	2011-02-21 20:50:39.328705290 -0500
@@ -29,7 +29,7 @@
     XtSetValues(widget, args, 1);
 
     Arg pixArgs[2];
-    Pixmap p;// = XCreatePixmap(XtDisplay(widget), DefaultRootWindow(XtDisplay(widget)), 20, 20, DefaultDepth(XtDisplay(widget), DefaultScreen(XtDisplay(widget))));
+    //Pixmap p;// = XCreatePixmap(XtDisplay(widget), DefaultRootWindow(XtDisplay(widget)), 20, 20, DefaultDepth(XtDisplay(widget), DefaultScreen(XtDisplay(widget))));
 
    Pixel back;
    XpmAttributes attr;
@@ -51,23 +51,57 @@
 
   void ImageButton::setPixmap(std::string path)
   {
-    Arg pixArgs[2];
-    Pixmap p;// = XCreatePixmap(XtDisplay(widget), DefaultRootWindow(XtDisplay(widget)), 20, 20, DefaultDepth(XtDisplay(widget), DefaultScreen(XtDisplay(widget))));
-
-   Pixel back;
-   XpmAttributes attr;
-   XtVaGetValues(widget,XmNbackground, &back, NULL);
-   static XpmColorSymbol none_color = { NULL, "None", (Pixel) 0 };
-   none_color.pixel = back;
+	Pixel back;
+	XpmAttributes attr;
+	XtVaGetValues(widget,XmNbackground, &back, NULL);
+	static XpmColorSymbol none_color = { NULL, "None", (Pixel) 0 };
+	none_color.pixel = back;
+	
+	attr.valuemask = XpmReturnPixels | XpmColorSymbols | XpmCloseness;
+	attr.colorsymbols = &none_color;
+	attr.numsymbols = 1;
+	attr.closeness = 80000;
+	
+	XpmReadFileToPixmap(XtDisplay(widget), DefaultRootWindow(XtDisplay(widget)), (char*)path.c_str(), &p, NULL, &attr);
+	
+	refreshPixmap();
+  }
 
-   attr.valuemask = XpmReturnPixels | XpmColorSymbols | XpmCloseness;
-   attr.colorsymbols = &none_color;
-   attr.numsymbols = 1;
-   attr.closeness = 80000;
+  void ImageButton::setText(int x, int y, std::string text)
+  {
+	GC gc;
+	Display *display = XtDisplay(widget);
+	gc = XCreateGC(display, p, NULL, 0);
+	XDrawString(display, p, gc, x, y, text.c_str(), strlen(text.c_str()));
+	refreshPixmap();
+  }
 
-XpmReadFileToPixmap(XtDisplay(widget), DefaultRootWindow(XtDisplay(widget)), (char*)path.c_str(), &p, NULL, &attr);
+  void ImageButton::drawLine(int x, int y, int x_prime, int y_prime)
+  {
+	GC gc;
+	Display *display = XtDisplay(widget);
+	gc = XCreateGC(display, p, NULL, 0);
+	XDrawLine(display, p, gc, x, y, x_prime, y_prime);
+	refreshPixmap();
+  }
 
-    XtSetArg(pixArgs[0], XmNlabelType, XmPIXMAP);
+  void ImageButton::drawClockHands(XPoint* hour, XPoint* minute, int points)
+  {
+	GC gc;
+	Display *display = XtDisplay(widget);
+	gc = XCreateGC(display, p, NULL, 0);
+	XDrawLines(display, p, gc, hour,  points, CoordModeOrigin);
+	XDrawLines(display, p, gc, minute,points, CoordModeOrigin);
+	XFillPolygon(display, p, gc, hour,   points, Convex, CoordModeOrigin);
+	XFillPolygon(display, p, gc, minute, points, Convex, CoordModeOrigin);
+	refreshPixmap();	
+  }
+  
+  void ImageButton::refreshPixmap()
+  {
+	Arg pixArgs[2];
+	
+	XtSetArg(pixArgs[0], XmNlabelType, XmPIXMAP);
     XtSetArg(pixArgs[1], XmNlabelPixmap, p);
     XtSetValues(widget, pixArgs, 2);
   }
diff -N -u -r ./src/motifmm/Makefile ../opencde_timers/src/motifmm/Makefile
--- ./src/motifmm/Makefile	2011-02-19 09:44:03.000000000 -0500
+++ ../opencde_timers/src/motifmm/Makefile	2011-02-19 12:29:11.000000000 -0500
@@ -3,7 +3,7 @@
 CC=g++
 CPPFLAGS=-Iinclude
 LDFLAGS=-lX11 -lXm -lXt -lXpm
-OBJ=Component.o Container.o Button.o Window.o ImageButton.o IconButton.o Panel.o Main.o ToggleButton.o Label.o TextBox.o ScrollPanel.o MessageBox.o MenuBar.o Custom.o FileView.o
+OBJ=Component.o Container.o Button.o Window.o ImageButton.o IconButton.o Panel.o Main.o ToggleButton.o Label.o Timer.o TextBox.o ScrollPanel.o MessageBox.o MenuBar.o Custom.o FileView.o
 OUT=../../lib/libmotifmm.so
 
 .SUFFIXES: .o
diff -N -u -r ./src/motifmm/Timer.cpp ../opencde_timers/src/motifmm/Timer.cpp
--- ./src/motifmm/Timer.cpp	1969-12-31 19:00:00.000000000 -0500
+++ ../opencde_timers/src/motifmm/Timer.cpp	2011-02-19 20:44:22.052991754 -0500
@@ -0,0 +1,58 @@
+#include <motifmm/Timer.h>
+
+namespace Motif
+{
+  void Timer::activateTimerCallback(XtPointer data, XtIntervalId *id)
+  {
+    Timer* timer = NULL;
+    
+    timer = (Timer*)data;
+    
+    if(timer->timerCallback != NULL)
+    {
+      timer->timerCallback->execute(timer);
+    }
+  }
+  
+  Timer::Timer(Container* container)
+  {
+    timerCallback = NULL;
+    id            = NULL;
+    duration      = 0;
+    
+    context = XtWidgetToApplicationContext(container->getContainerWidget());
+  }
+  
+  Timer::~Timer()
+  {
+    // Timer Destructor
+  }
+  
+  void Timer::removeTimer()
+  {
+    if(&id != NULL )
+    {
+      XtRemoveTimeOut(id);
+    }
+  }
+  
+  void Timer::runTimer()
+  {
+    id = XtAppAddTimeOut(context, duration, activateTimerCallback, this); 
+  }
+  
+  void Timer::setTimerCallback(Function* function)
+  {
+    timerCallback = function;
+  }
+  
+  void Timer::setDuration(unsigned long duration)
+  {
+    this->duration = duration;
+  }
+  
+  unsigned long Timer::getDuration()
+  {
+    return duration;
+  }
+}
diff -N -u -r ./src/motifmm/include/motifmm/ImageButton.h ../opencde_timers/src/motifmm/include/motifmm/ImageButton.h
--- ./src/motifmm/include/motifmm/ImageButton.h	2011-02-19 09:44:03.000000000 -0500
+++ ../opencde_timers/src/motifmm/include/motifmm/ImageButton.h	2011-02-21 20:06:40.686446770 -0500
@@ -23,6 +23,7 @@
   {
   private:
     Widget widget;
+	Pixmap p;
 
   public:
     ImageButton(Container* container, std::string name);
@@ -31,7 +32,11 @@
 
     Widget getComponentWidget();
     void setPixmap(std::string path);
-
+	void setText(int x, int y, std::string text);
+	void drawLine(int x, int y, int x_prime, int y_prime);
+	void drawClockHands(XPoint* hour, XPoint* minute, int points);
+	void refreshPixmap();
+	
   };
 }
 
diff -N -u -r ./src/motifmm/include/motifmm/Timer.h ../opencde_timers/src/motifmm/include/motifmm/Timer.h
--- ./src/motifmm/include/motifmm/Timer.h	1969-12-31 19:00:00.000000000 -0500
+++ ../opencde_timers/src/motifmm/include/motifmm/Timer.h	2011-02-19 20:45:05.460263046 -0500
@@ -0,0 +1,37 @@
+namespace Motif
+{
+  class Timer;
+}
+
+#ifndef MOTIFMM_TIMER_H
+#define MOTIFMM_TIMER_H
+
+#include <motifmm/Main.h>
+#include <motifmm/Function.h>
+#include <motifmm/Container.h>
+
+namespace Motif
+{
+  class Timer
+  {
+  private:
+    XtAppContext context;
+    unsigned long duration;
+    XtIntervalId  id;
+  
+  protected:
+    Function* timerCallback;
+    
+  public:
+    Timer(Container *container);
+    ~Timer();
+    void runTimer();
+    void removeTimer();
+    void setTimerCallback(Function* function);
+    void setDuration(unsigned long duration);
+    unsigned long getDuration();
+    static void activateTimerCallback(XtPointer data, XtIntervalId *id);
+  };
+}
+
+#endif
diff -N -u -r ./src/motifmm/include/motifmm.h ../opencde_timers/src/motifmm/include/motifmm.h
--- ./src/motifmm/include/motifmm.h	2011-02-19 09:44:03.000000000 -0500
+++ ../opencde_timers/src/motifmm/include/motifmm.h	2011-02-19 11:24:46.000000000 -0500
@@ -10,11 +10,11 @@
 #include <motifmm/Function.h>
 #include <motifmm/ToggleButton.h>
 #include <motifmm/Label.h>
+#include <motifmm/Timer.h>
 #include <motifmm/TextBox.h>
 #include <motifmm/ScrollPanel.h>
 #include <motifmm/MessageBox.h>
 #include <motifmm/MenuBar.h>
 #include <motifmm/FileView.h>
-
 #endif
 
